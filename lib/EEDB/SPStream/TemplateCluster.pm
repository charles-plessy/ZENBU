=head1 NAME - EEDB::SPStream::TemplateCluster

=head1 DESCRIPTION

a signal-processing-stream filter built around the same code as EEDB::Tools:OverlapCompare
As a stream filter the idea is a restricted use-case which is very common.
This filter is configured with a set of sources and expansion distances.
These sources form a collation of "templates" which are used for "clustering".
If the input features/expressions overlaps with any of these sources the tempate
is copied and the expression is "collected" under it as a "pseudo-cluster".
There will also be an optional min/max to compress the feature to the
limits of the input stream.

=head1 CONTACT

Jessica Severin <severin@gsc.riken.jp>

=head1 LICENSE

 * Software License Agreement (BSD License)
 * EdgeExpressDB [eeDB] system
 * copyright (c) 2007-2009 Jessica Severin RIKEN OSC
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Jessica Severin RIKEN OSC nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=head1 APPENDIX

The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _

=cut

package EEDB::SPStream::TemplateCluster;

use strict;

use EEDB::SPStream;
use EEDB::SPStream::MergeStreams;
our @ISA = qw(EEDB::SPStream::MergeStreams);

#################################################
# Class methods
#################################################

sub class { return "EEDB::SPStream::TemplateCluster"; }


#################################################
# 
# initialization and configuration methods
#
#################################################

sub init {
  my $self = shift;
  my @args = @_;
  $self->SUPER::init(@args);
   
  $self->{'_ignore_strand'} = 0;
  $self->{'template_buffer'}= [];
  $self->{'template_stream_empty'} =0;

  return $self;
}


=head2 template_stream

  Description: set the input or source stream feeding objects into this level of the stream stack.
  Returntype : either an MQdb::DBStream or subclass of EEDB::SPStream object or undef if not set
  Exceptions : none 

=cut

sub template_stream {
  my $self = shift;
  return $self->side_stream(@_);
}

sub ignore_strand {
  my $self = shift;
  return $self->{'_ignore_strand'} = shift if(@_);
  return $self->{'_ignore_strand'};
}


#
#################################################
#

sub display_desc {
  my $self = shift;
  my $str = sprintf("TemplateCluster");
  return $str;
}

sub xml_start {
  my $self = shift;
  my $str = $self->SUPER::xml_start;

  if($self->ignore_strand) { $str .= "<ignore_strand value='1'/>\n"; }
  else { $str .= "<ignore_strand value='0'/>\n"; }
  if($self->template_stream) {  
    $str .= "<template_stream>\n";
    $str .= $self->template_stream->xml;
    $str .= "</template_stream>\n";
  }  
  return $str;
}

sub _init_from_xmltree {
  my $self = shift;
  my $xmlTree = shift;  #a hash tree generated by XML::TreePP
  
  unless($xmlTree->{'-module'} eq "EEDB::SPStream::TemplateCluster") { return undef; }  
  if($xmlTree->{'ignore_strand'}) { $self->ignore_strand($xmlTree->{'ignore_strand'}->{'-value'}); }
  if($xmlTree->{'template_stream'}) {
    my ($head,$tail) = EEDB::SPStream->create_stream_from_xmltree($xmlTree->{'template_stream'});
    if($head) { $self->template_stream($head); }
  }  
  return $self;
}


#################################################
#
# override method for subclasses which will
# do all the work
#
#################################################

sub next_in_stream {
  my $self = shift;
  
  if(defined($self->source_stream)) {
    while(my $obj = $self->source_stream->next_in_stream) {
      if(($obj->class ne 'Expression') and ($obj->class ne "Feature")) {
        #other object classes are just passed through this module
        return $obj;
      }

      my $template = $self->process_feature($obj);
      if($template) { return $template; }
    }
  }
  
  # input stream is empty so empty out the buffer
  my $template = shift @{$self->{'template_buffer'}};
  if($template) {
    $self->calc_template_significance($template);
    return $template; 
  }
    
  return undef;
}

sub _reset_stream {
  my $self = shift;
  $self->{'template_stream_empty'} =0;
  $self->{'template_buffer'}= [];
  return undef;
}

#
#################################################
#

sub process_feature {
  my $self = shift;
  my $obj1 = shift;

  #
  # first see if there are any templates on the head of the buffer which we are done with
  #
  my $template = $self->{'template_buffer'}->[0];
  if($template and ($self->overlap_check($template, $obj1) < 0)) { #template < obj1 
    my $template = shift @{$self->{'template_buffer'}};
    $self->calc_template_significance($template);
    return $template; 
  }

  #
  # next do work on the end of the buffer, 
  # fill it until we hit a template which is beyond(>obj1)
  #
  $template  = undef;
  my $bufsize = scalar(@{$self->{'template_buffer'}});
  if($bufsize>0) { $template = $self->{'template_buffer'}->[$bufsize-1]; }
  if(!$template) { $template = $self->extend_template_buffer(); }
  while($template && ($self->overlap_check($template, $obj1) != 1)) {
    $template = $self->extend_template_buffer();
  }

  #
  # then process the overlaps in the buffer
  #
  foreach $template (@{$self->{'template_buffer'}}) {
    if(!($self->ignore_strand) and ($template->strand ne "") and ($obj1->strand ne $template->strand)) { next; }

    if($self->overlap_check($obj1, $template) == 0) {
      if($obj1->class eq "Expression") {
        my $experiment = $obj1->experiment;
        my $expr = $template->get_expression($experiment, $obj1->type);
        my $value = $obj1->value;
        if($expr) {
          $value += $expr->value;
          $expr->value($value);
        } else {
          $template->add_expression_data($experiment, $obj1->type, $obj1->value);
        }
      }
    }
  }

  return undef;
}


sub overlap_check {
  my $self = shift;
  my $feature1 = shift;
  my $feature2 = shift;

  # -1 means f1 ends before f2 starts (f1<f2)
  #  1 means f1 starts afer f2 ends   (f1>f2)
  #  0 means overlapping
  #  -999 means unable to determine overlap

  return -999 unless($feature1 and $feature2); #stop
  return -999 if($feature1->chrom_name ne $feature2->chrom_name);
  
  if($feature1->chrom_end   < $feature2->chrom_start) { return  -1; } #f1 ends before f2 starts (f1<f2)
  if($feature1->chrom_start > $feature2->chrom_end)   { return  1; } #f1 starts AFTER f2 ends   (f1>f2)
  
  if(($feature2->chrom_start <= $feature1->chrom_end) and
     ($feature2->chrom_end   >= $feature1->chrom_start)) { 
    return 0;
  }
  return -999;  #hmm can not figure out overlap
}


sub extend_template_buffer {
  my $self = shift;

  if(!defined($self->template_stream)) { return undef; }
  if($self->{'template_stream_empty'}) { return undef; }
  my $template = $self->template_stream->next_in_stream;
  while($template and $template->class ne "Feature") { 
    $template = $self->template_stream->next_in_stream;
  }
  if(!defined($template)) { $self->{'template_stream_empty'} = 1; }
  else { push @{$self->{'template_buffer'}}, $template; }
  return $template;
}


sub calc_template_significance {
  my $self = shift;
  my $template = shift;
  
  my $significance = 0;
  foreach my $express (@{$template->get_expression_array}) {
    $significance += $express->value;
    #if($express->value > $significance) { $significance = $express->value; }
  }
  $template->significance($significance);
  return $template; 
}


1;

